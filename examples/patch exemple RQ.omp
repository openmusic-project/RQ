; OM File Header - Saved 2016/06/22 16:12:20
; (6.1001 :patc (om-make-point 10 10) (om-make-point 254 204) (om-make-point 885 647) "" 183 0 "2016/06/17 17:49:00" "2016/06/22 16:12:20")
; End File Header
(in-package :om)(load-lib-for (quote ("RQ")))(setf *om-current-persistent* (om-load-patch1 "patch exemple rq" (quote ((let ((box (om-load-boxcall (quote genfun) "GET-VOICE" (quote get-voice) (quote ((om-load-inputfun (quote input-funbox) "rq" "RQ" nil))) (om-make-point 261 351) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 303 75) (quote "Here is the result of quantification.$Do not forget to block the rq box before evaluating the voice !") "" (om-make-point 495 454) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 239 442) (om-make-point 241 88) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 1)) (1 (1 1)) 1 1)) ((4 4) ((1 (1 1)) (1 (1 1)) 2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (992)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 120) (((1 0) (1/4 121))))) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 658 307) (om-make-point 409 147) 0 2 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 134 52) (quote "Double-click to open the user interface") "" (om-make-point 358 289) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 190 35) (quote "list of segmentation marks") "" (om-make-point 459 202) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 382 206) (om-make-point 73 30) (list 0 2000) "(0 2000 )" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "RQ" (quote rq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "chord-seq to quantify" "chord-seq" nil) (om-load-inputfun (quote input-funbox) "list of segmentation marks" "marks" (list 0)))) (om-make-point 275 283) (om-make-point 70 50) (let ((qs (if (find-class (quote rq) nil) (make-instance (quote rq) :chord-seq (let ((object (let ((newobj (when (find-class (quote rq::quant-chord-seq) nil) (make-instance (quote rq::quant-chord-seq) :lmidic (quote ((6000) (6000) (6000) (6200) (6400) (6200) (6000) (6400) (6200) (6200) (6000))) :lonset (quote (0 245 503 748 997 1528 1997 2289 2518 2726 2987 3987)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (setf (rq::pulse-flag newobj) (quote t)) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (set-object-analysis object (list (if (find-class (quote k-best-analysis) nil) (make-instance (quote k-best-analysis) :analysis-segments (list (if (find-class (quote marker-segment) nil) (make-instance (quote marker-segment) :segment-data (make-instance (quote rq::k-best-data) :tempo (quote nil) :tempomerge (quote t) :schema (quote ((((2 3) (2 3) 2) (5 (2 3) 2) ((7 11 13))))) :n-solution 10 :precision 0.5 :gracepen 2 :updateflag t :slur nil :grid (quote ((1/8 1/8) (1/8 1/8) 1/4 1/4))) :color (om-make-color 0.7 0.3 0.3) :tb 0 :te 2000 :mrk-time 0 :from-file t)) (if (find-class (quote marker-segment) nil) (make-instance (quote marker-segment) :segment-data (make-instance (quote rq::k-best-data) :tempo (quote nil) :tempomerge (quote t) :schema (quote ((((2 3) (2 3) 2) (5 (2 3) 2) ((7 11 13))))) :n-solution 10 :precision 0.5 :gracepen 2 :updateflag t :slur 997 :grid (quote ((1/8 1/8) (1/8 1/8) 1/4 1/4))) :color (om-make-color 0.7 0.3 0.3) :tb 2000 :te 3987 :mrk-time 2000 :from-file t))) :segments=beats nil :n-beats-per-seg 1 :segpen 5 :from-file t)))) object) :marks (list 0 2000) :from-file t)))) (setf (rq::color-flag qs) t) (setf (rq::pulse-flag qs) t) (setf (rq::display-mode qs) :open) (rq::compute-k-best qs) (setf (rq::wp qs) (rq::make-working-poly qs)) (setf (rq::current-poly (rq::wp qs)) 1 (rq::selections (rq::wp qs)) (quote (0 2))) (setf (rq::solution qs) (let ((qv (let ((newobj (when (find-class (quote rq::quant-voice) nil) (make-instance (quote rq::quant-voice) :tree (quote (2 (((4 4) ((4 ((1 (1 1)) (1 (1 1)) 1 1)))) ((4 4) ((4 ((1 (1 1)) (1 (1 1)) 1 1.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (496)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 120) (((1 0) (1/4 121))))) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil)))))) (setf (rq::colorflag newobj) (quote t)) (setf (rq::editflag newobj) (quote t)) (setf (rq::choices newobj) (list (let* ((choice (make-instance (quote rq::choice-table)))) (setf (rq::table choice) (make-hash-table :test (quote equalp))) (setf (gethash (rq::make-path (quote nil) 0 151351200 1) (rq::table choice)) (list (quote ((1) (1) (1) (1))) (rq::make-weight :dist (rq::make-distance #(0.0 378378.0 227028.0 151348.0 227032.0 2118920.0 227024.0) #(-1 1 -1 1 1 -1 1) 151351200 0.022000025 t) :cpty (load-complexity (quote nil) 0 0) :val 3.1100002) (quote (1)) (quote (7))) (gethash (rq::make-path (quote ((4 . 3))) 75675600 37837800 4) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 0.0 0.0 0.0) #(0 0 0 0 0 0 0) 151351200 0.0 t) :cpty (load-complexity (quote nil) 1 0) :val 0.0) (quote nil) (quote nil)) (gethash (rq::make-path (quote ((4 . 2) (2 . 1))) 37837800 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 227028.0 151348.0 0.0 0.0 0.0) #(0 0 -1 1 0 0 0) 151351200 0.0024999867 t) :cpty (load-complexity (quote nil) 1 0) :val 0.012499933) (quote (3)) (quote (4))) (gethash (rq::make-path (quote ((4 . 1))) 0 37837800 4) (rq::table choice)) (list (quote ((1) (1))) (rq::make-weight :dist (rq::make-distance #(0.0 378378.0 0.0 0.0 0.0 0.0 0.0) #(-1 1 0 0 0 0 0) 151351200 0.0025 t) :cpty (load-complexity (quote ((1 1))) 2 0) :val 0.5125) (quote (1)) (quote nil)) (gethash (rq::make-path (quote ((4 . 4))) 113513400 37837800 4) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 0.0 2118920.0 227024.0) #(0 0 0 0 0 -1 1) 151351200 0.015500003 t) :cpty (load-complexity (quote nil) 1 0) :val 0.077500016) (quote (6)) (quote (7))) (gethash (rq::make-path (quote ((4 . 2))) 37837800 37837800 4) (rq::table choice)) (list (quote ((1) (1))) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 227028.0 151348.0 227032.0 0.0 0.0) #(0 0 -1 1 1 0 0) 151351200 0.004000021 t) :cpty (load-complexity (quote ((1 1))) 2 0) :val 0.5200001) (quote (3)) (quote (5))) (gethash (rq::make-path (quote ((4 . 2) (2 . 2))) 56756700 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 227032.0 0.0 0.0) #(0 0 0 0 1 0 0) 151351200 0.0015000344 t) :cpty (load-complexity (quote nil) 1 0) :val 0.0075001717) (quote nil) (quote (5))) (gethash (rq::make-path (quote ((4 . 1) (2 . 2))) 18918900 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 0.0 0.0 0.0) #(0 0 0 0 0 0 0) 151351200 0.0 t) :cpty (load-complexity (quote nil) 1 0) :val 0.0) (quote nil) (quote nil)) (gethash (rq::make-path (quote ((4 . 1) (2 . 1))) 0 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 378378.0 0.0 0.0 0.0 0.0 0.0) #(-1 1 0 0 0 0 0) 151351200 0.0025 t) :cpty (load-complexity (quote nil) 1 0) :val 0.012499999) (quote (1)) (quote (2)))) (setf (rq::modified choice) nil) (setf (rq::user-edit choice) (quote nil)) choice) (let* ((choice (make-instance (quote rq::choice-table)))) (setf (rq::table choice) (make-hash-table :test (quote equalp))) (setf (gethash (rq::make-path (quote nil) 0 151351200 1) (rq::table choice)) (list (quote ((2) (1) (1) (1))) (rq::make-weight :dist (rq::make-distance #(0.0 3094434.0 1618624.0 1456768.0 495104.0 0.0) #(-1 -1 -1 1 1 0) 151351200 0.044036188 t) :cpty (load-complexity (quote nil) 0 0) :val 3.220181) (quote (1)) (quote nil)) (gethash (rq::make-path (quote ((4 . 3))) 75675600 37837800 4) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 0.0 0.0) #(0 0 0 0 0 0) 151351200 0.0 t) :cpty (load-complexity (quote nil) 1 0) :val 0.0) (quote nil) (quote nil)) (gethash (rq::make-path (quote ((4 . 2) (2 . 1))) 37837800 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 1618624.0 1456768.0 0.0 0.0) #(0 0 -1 1 0 0) 151351200 0.020319576 t) :cpty (load-complexity (quote nil) 1 0) :val 0.101597876) (quote (3)) (quote (4))) (gethash (rq::make-path (quote ((4 . 1))) 0 37837800 4) (rq::table choice)) (list (quote ((1) (1))) (rq::make-weight :dist (rq::make-distance #(0.0 3094434.0 0.0 0.0 0.0 0.0) #(-1 -1 0 0 0 0) 151351200 0.020445388 t) :cpty (load-complexity (quote ((1 1))) 2 0) :val 0.602227) (quote (1)) (quote nil)) (gethash (rq::make-path (quote ((4 . 4))) 113513400 37837800 4) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 0.0 0.0) #(0 0 0 0 0 0) 151351200 0.0 t) :cpty (load-complexity (quote nil) 1 0) :val 0.0) (quote nil) (quote nil)) (gethash (rq::make-path (quote ((4 . 2))) 37837800 37837800 4) (rq::table choice)) (list (quote ((1) (1))) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 1618624.0 1456768.0 495104.0 0.0) #(0 0 -1 1 1 0) 151351200 0.023590802 t) :cpty (load-complexity (quote ((1 1))) 2 0) :val 0.617954) (quote (3)) (quote (5))) (gethash (rq::make-path (quote ((4 . 2) (2 . 2))) 56756700 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 495104.0 0.0) #(0 0 0 0 1 0) 151351200 0.003271226 t) :cpty (load-complexity (quote nil) 1 0) :val 0.016356131) (quote nil) (quote (5))) (gethash (rq::make-path (quote ((4 . 1) (2 . 2))) 18918900 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 3094434.0 0.0 0.0 0.0 0.0) #(0 -1 0 0 0 0) 151351200 0.020445388 t) :cpty (load-complexity (quote nil) 1 0) :val 0.10222694) (quote (2)) (quote nil)) (gethash (rq::make-path (quote ((4 . 1) (2 . 1))) 0 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 0.0 0.0) #(-1 0 0 0 0 0) 151351200 0.0 t) :cpty (load-complexity (quote nil) 1 0) :val 0.0) (quote (1)) (quote nil))) (setf (rq::modified choice) nil) (setf (rq::user-edit choice) (quote nil)) choice))) (setf (rq::slurs newobj) (list nil 997)) (setf (rq::ks newobj) (list 1 3)) (setf (rq::indexes newobj) (list 0 0)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (setf (rq::indexes qv) (quote (0 0)) (rq::ks qv) (quote (1 3)) (rq::slurs qv) (quote (nil 997)) (rq::choices qv) (list (let* ((choice (make-instance (quote rq::choice-table)))) (setf (rq::table choice) (make-hash-table :test (quote equalp))) (setf (gethash (rq::make-path (quote nil) 0 151351200 1) (rq::table choice)) (list (quote ((1) (1) (1) (1))) (rq::make-weight :dist (rq::make-distance #(0.0 378378.0 227028.0 151348.0 227032.0 2118920.0 227024.0) #(-1 1 -1 1 1 -1 1) 151351200 0.022000025 t) :cpty (load-complexity (quote nil) 0 0) :val 3.1100002) (quote (1)) (quote (7))) (gethash (rq::make-path (quote ((4 . 3))) 75675600 37837800 4) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 0.0 0.0 0.0) #(0 0 0 0 0 0 0) 151351200 0.0 t) :cpty (load-complexity (quote nil) 1 0) :val 0.0) (quote nil) (quote nil)) (gethash (rq::make-path (quote ((4 . 2) (2 . 1))) 37837800 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 227028.0 151348.0 0.0 0.0 0.0) #(0 0 -1 1 0 0 0) 151351200 0.0024999867 t) :cpty (load-complexity (quote nil) 1 0) :val 0.012499933) (quote (3)) (quote (4))) (gethash (rq::make-path (quote ((4 . 1))) 0 37837800 4) (rq::table choice)) (list (quote ((1) (1))) (rq::make-weight :dist (rq::make-distance #(0.0 378378.0 0.0 0.0 0.0 0.0 0.0) #(-1 1 0 0 0 0 0) 151351200 0.0025 t) :cpty (load-complexity (quote ((1 1))) 2 0) :val 0.5125) (quote (1)) (quote nil)) (gethash (rq::make-path (quote ((4 . 4))) 113513400 37837800 4) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 0.0 2118920.0 227024.0) #(0 0 0 0 0 -1 1) 151351200 0.015500003 t) :cpty (load-complexity (quote nil) 1 0) :val 0.077500016) (quote (6)) (quote (7))) (gethash (rq::make-path (quote ((4 . 2))) 37837800 37837800 4) (rq::table choice)) (list (quote ((1) (1))) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 227028.0 151348.0 227032.0 0.0 0.0) #(0 0 -1 1 1 0 0) 151351200 0.004000021 t) :cpty (load-complexity (quote ((1 1))) 2 0) :val 0.5200001) (quote (3)) (quote (5))) (gethash (rq::make-path (quote ((4 . 2) (2 . 2))) 56756700 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 227032.0 0.0 0.0) #(0 0 0 0 1 0 0) 151351200 0.0015000344 t) :cpty (load-complexity (quote nil) 1 0) :val 0.0075001717) (quote nil) (quote (5))) (gethash (rq::make-path (quote ((4 . 1) (2 . 2))) 18918900 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 0.0 0.0 0.0) #(0 0 0 0 0 0 0) 151351200 0.0 t) :cpty (load-complexity (quote nil) 1 0) :val 0.0) (quote nil) (quote nil)) (gethash (rq::make-path (quote ((4 . 1) (2 . 1))) 0 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 378378.0 0.0 0.0 0.0 0.0 0.0) #(-1 1 0 0 0 0 0) 151351200 0.0025 t) :cpty (load-complexity (quote nil) 1 0) :val 0.012499999) (quote (1)) (quote (2)))) (setf (rq::modified choice) nil) (setf (rq::user-edit choice) (quote nil)) choice) (let* ((choice (make-instance (quote rq::choice-table)))) (setf (rq::table choice) (make-hash-table :test (quote equalp))) (setf (gethash (rq::make-path (quote nil) 0 151351200 1) (rq::table choice)) (list (quote ((2) (1) (1) (1))) (rq::make-weight :dist (rq::make-distance #(0.0 3094434.0 1618624.0 1456768.0 495104.0 0.0) #(-1 -1 -1 1 1 0) 151351200 0.044036188 t) :cpty (load-complexity (quote nil) 0 0) :val 3.220181) (quote (1)) (quote nil)) (gethash (rq::make-path (quote ((4 . 3))) 75675600 37837800 4) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 0.0 0.0) #(0 0 0 0 0 0) 151351200 0.0 t) :cpty (load-complexity (quote nil) 1 0) :val 0.0) (quote nil) (quote nil)) (gethash (rq::make-path (quote ((4 . 2) (2 . 1))) 37837800 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 1618624.0 1456768.0 0.0 0.0) #(0 0 -1 1 0 0) 151351200 0.020319576 t) :cpty (load-complexity (quote nil) 1 0) :val 0.101597876) (quote (3)) (quote (4))) (gethash (rq::make-path (quote ((4 . 1))) 0 37837800 4) (rq::table choice)) (list (quote ((1) (1))) (rq::make-weight :dist (rq::make-distance #(0.0 3094434.0 0.0 0.0 0.0 0.0) #(-1 -1 0 0 0 0) 151351200 0.020445388 t) :cpty (load-complexity (quote ((1 1))) 2 0) :val 0.602227) (quote (1)) (quote nil)) (gethash (rq::make-path (quote ((4 . 4))) 113513400 37837800 4) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 0.0 0.0) #(0 0 0 0 0 0) 151351200 0.0 t) :cpty (load-complexity (quote nil) 1 0) :val 0.0) (quote nil) (quote nil)) (gethash (rq::make-path (quote ((4 . 2))) 37837800 37837800 4) (rq::table choice)) (list (quote ((1) (1))) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 1618624.0 1456768.0 495104.0 0.0) #(0 0 -1 1 1 0) 151351200 0.023590802 t) :cpty (load-complexity (quote ((1 1))) 2 0) :val 0.617954) (quote (3)) (quote (5))) (gethash (rq::make-path (quote ((4 . 2) (2 . 2))) 56756700 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 495104.0 0.0) #(0 0 0 0 1 0) 151351200 0.003271226 t) :cpty (load-complexity (quote nil) 1 0) :val 0.016356131) (quote nil) (quote (5))) (gethash (rq::make-path (quote ((4 . 1) (2 . 2))) 18918900 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 3094434.0 0.0 0.0 0.0 0.0) #(0 -1 0 0 0 0) 151351200 0.020445388 t) :cpty (load-complexity (quote nil) 1 0) :val 0.10222694) (quote (2)) (quote nil)) (gethash (rq::make-path (quote ((4 . 1) (2 . 1))) 0 18918900 8) (rq::table choice)) (list (quote nil) (rq::make-weight :dist (rq::make-distance #(0.0 0.0 0.0 0.0 0.0 0.0) #(-1 0 0 0 0 0) 151351200 0.0 t) :cpty (load-complexity (quote nil) 1 0) :val 0.0) (quote (1)) (quote nil))) (setf (rq::modified choice) nil) (setf (rq::user-edit choice) (quote nil)) choice)) (rq::editflag qv) t (rq::colorflag qv) t) qv)) (setf (rq (rq::solution qs)) qs) (setf (rq::k-bests (rq::solution qs)) (rq::k-bests qs)) (initialize-instance (rq::solution qs) :tree (tree (rq::solution qs)) :chords (get-chords (chord-seq qs)) :tempo (rq::get-tempo (rq::wp qs))) (rq::update-grids (rq::solution qs)) qs) "x" nil (pairlis (quote (rq::poly-zoom rq::voice-zoom rq::chord-seq-zoom winpos winsize cursor-mode obj-mode fontsize mode score-mode notechancolor? show-stems approx cmnpref staff grillestep scale rq::display-mode rq::voice-mode)) (list 1 1 1 (om-make-point 10 40) (om-make-point 1500 590) (quote :normal) 1 24 0 0 nil (quote t) 2 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2 2 2 2 2 3))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) 1000 nil (quote :open) (quote :render))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 146 69) (om-make-point 237 94) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6000) (6000) (6200) (6400) (6200) (6000) (6400) (6200) (6200) (6000))) :lonset (quote (0 245 503 748 997 1528 1997 2289 2518 2726 2987 3987)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1001 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((9) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 177/100 nil 1000 0 (om-make-point 1010 304) (om-make-point 499 337) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (0 0 2 0 nil 0) (7 0 6 1 nil 0) (5 0 6 2 nil 0))) nil 6.1001))
